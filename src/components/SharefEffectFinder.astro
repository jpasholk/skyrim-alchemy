<h2>Ingredient Effect Matcher</h2>

<!-- Container for displaying all ingredients grouped alphabetically with checkboxes -->
<div id="ingredientList" class="ingredient-list">
    <p class="notice">Select ingredients from your inventory to find shared effects.</p>
</div>

<!-- Button to show shared effects with adjusted placement -->
<div class="button-container">
    <button id="showSharedEffects" disabled>Show Shared Effects</button>
    <p id="matchCount" class="notice" style="display: none;"></p>
</div>

<!-- Container for displaying shared effects and matching ingredients -->
<div id="results" class="results">
    <p class="notice">Shared effects and matching ingredients will show here.</p>
</div>

<script type="module">
    const effectsURL = 'https://raw.githubusercontent.com/jpasholk/skyrim-alchemy/master/src/data/effects.json';
    const ingredientsURL = 'https://raw.githubusercontent.com/jpasholk/skyrim-alchemy/master/src/data/ingredients.json';

    let ingredientsData = [];

    async function loadJSON(url) {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`Failed to fetch data from ${url}`);
        return await response.json();
    }

    async function initializeIngredientsAndEffects() {
        try {
            const [effectsData, loadedIngredientsData] = await Promise.all([
                loadJSON(effectsURL),
                loadJSON(ingredientsURL)
            ]);

            ingredientsData = loadedIngredientsData;
            ingredientsData.sort((a, b) => a.name.localeCompare(b.name));

            const groupedIngredients = ingredientsData.reduce((acc, ingredient) => {
                const firstLetter = ingredient.name[0].toUpperCase();
                if (!acc[firstLetter]) acc[firstLetter] = [];
                acc[firstLetter].push(ingredient);
                return acc;
            }, {});

            displayIngredientCheckboxes(groupedIngredients);
        } catch (error) {
            console.error("Error initializing ingredients and effects:", error);
        }
    }

    function displayIngredientCheckboxes(groupedIngredients) {
        const ingredientListDiv = document.getElementById('ingredientList');
        ingredientListDiv.innerHTML = "";

        Object.keys(groupedIngredients).forEach(letter => {
            const article = document.createElement('article');
            article.classList.add('ingredient-group');

            const letterHeading = document.createElement('h2');
            letterHeading.textContent = letter;
            article.appendChild(letterHeading);

            const separator = document.createElement('hr');
            article.appendChild(separator);

            groupedIngredients[letter].forEach((ingredient, index) => {
                const ingredientDiv = document.createElement('div');
                ingredientDiv.classList.add('ingredient-item');

                const checkboxId = `ingredient-${letter}-${index}`;

                ingredientDiv.innerHTML = `
                    <label for="${checkboxId}">
                        <input type="checkbox" id="${checkboxId}" value="${ingredient.name}" data-effects='${JSON.stringify(ingredient.effects)}'>
                        ${ingredient.name}
                    </label>
                `;
                article.appendChild(ingredientDiv);
            });

            ingredientListDiv.appendChild(article);
        });

        ingredientListDiv.addEventListener('change', () => {
            const checkboxes = ingredientListDiv.querySelectorAll('input[type="checkbox"]');
            const anyChecked = Array.from(checkboxes).some(checkbox => checkbox.checked);
            document.getElementById('showSharedEffects').disabled = !anyChecked;
        });
    }

    function showSharedEffects() {
        const ingredientListDiv = document.getElementById('ingredientList');
        const resultsDiv = document.getElementById('results');
        const matchCountElement = document.getElementById('matchCount');
        
        resultsDiv.innerHTML = ""; // Clear previous results

        const selectedIngredients = Array.from(ingredientListDiv.querySelectorAll('input[type="checkbox"]:checked'))
            .map(checkbox => {
                const ingredientName = checkbox.value;
                return ingredientsData.find(ingredient => ingredient.name === ingredientName);
            })
            .filter(ingredient => ingredient);

        if (selectedIngredients.length === 0) {
            resultsDiv.innerHTML = "<p>No ingredients selected.</p>";
            matchCountElement.style.display = "none";
            return;
        }

        const effectMap = {};
        selectedIngredients.forEach(ingredient => {
            ingredient.effects.forEach(effect => {
                if (!effectMap[effect]) {
                    effectMap[effect] = [];
                }
                effectMap[effect].push(ingredient);
            });
        });

        const sharedEffects = Object.keys(effectMap).filter(effect => effectMap[effect].length >= 2);

        if (sharedEffects.length > 0) {
            matchCountElement.textContent = `Found ${sharedEffects.length} shared ${sharedEffects.length === 1 ? 'effect' : 'effects'}`;
            matchCountElement.style.display = "block";

            sharedEffects.forEach(effect => {
                const matchingIngredients = effectMap[effect];
                const isPositiveEffect = !isNegativeEffect(effect);

                const effectSection = document.createElement('div');
                effectSection.classList.add('effect-section');

                const effectHeader = document.createElement('h2');
                effectHeader.textContent = `${effect}`;
                effectSection.appendChild(effectHeader);

                const ingredientGrid = document.createElement('div');
                ingredientGrid.classList.add('ingredient-grid');

                matchingIngredients.forEach(ingredient => {
                    const ingredientDiv = document.createElement('div');
                    ingredientDiv.classList.add('ingredient');

                    const effectWarningHTML = isPositiveEffect
                        ? getWarningHTML(ingredient, matchingIngredients, true)
                        : getWarningHTML(ingredient, matchingIngredients, false);

                    ingredientDiv.innerHTML = `
                        <article>
                            <h3>${ingredient.name}</h3>
                            <hr>
                            ${effectWarningHTML}
                            <p><strong>Effects:</strong></p>
                            <ul>
                                ${ingredient.effects.map(eff => colorEffect(eff, eff === effect)).join('')}
                            </ul>
                            <p><strong>Value:</strong> ${ingredient.value}</p>
                            <p><strong>Weight:</strong> ${ingredient.weight}</p>
                            <p><strong>Plantable:</strong> ${ingredient.plantable ? 'Yes' : 'No'}</p>
                            <p><strong>Fishable:</strong> ${ingredient.fishable ? 'Yes' : 'No'}</p>
                        </article>
                    `;
                    ingredientGrid.appendChild(ingredientDiv);
                });
                effectSection.appendChild(ingredientGrid);
                resultsDiv.appendChild(effectSection);
            });

            // Add the reset button after the results load
            const resetButton = document.createElement('div');
            resetButton.style.marginTop = "1rem";
            resetButton.style.textAlign = "center";  // Center the button
            resetButton.innerHTML = `
                <a class="button" href="/effect-matcher" style="padding: 0.5rem 1rem;">Reset</a>
            `;
            resultsDiv.appendChild(resetButton);
        } else {
            resultsDiv.innerHTML = "<p>No shared effects found among selected ingredients.</p>";
            matchCountElement.style.display = "none";
        }
    }

    function getWarningHTML(ingredient, matchingIngredients, showNegative) {
        const effectsToShow = ingredient.effects.filter(effect => showNegative ? isNegativeEffect(effect) : !isNegativeEffect(effect));
        const warningColor = showNegative ? "lightcoral" : "lightgreen";
        const warningTitle = showNegative ? "Shared Negative Effects" : "Shared Positive Effects";

        const effectMatches = effectsToShow.flatMap(eff =>
            matchingIngredients
                .filter(otherIng => otherIng !== ingredient && otherIng.effects.includes(eff))
                .map(otherIng => `<li style="color: ${warningColor};">${eff} (also in ${otherIng.name})</li>`)
        );

        return effectMatches.length > 0
            ? `<p style="color: ${warningColor}; font-weight: bold;">${warningTitle}:</p><ul style="color: ${warningColor};">${effectMatches.join("")}</ul>`
            : "";
    }

    function colorEffect(effect, isSelected = false) {
        const isNegative = isNegativeEffect(effect);
        const color = isNegative ? "lightcoral" : "inherit";
        const style = `color: ${color}; font-weight: ${isSelected ? 'bold' : 'normal'}; text-decoration: ${isSelected ? 'underline' : 'none'};`;
        return `<li style="${style}">${effect}</li>`;
    }

    function isNegativeEffect(effect) {
        const negativeKeywords = ["damage", "ravage", "paralysis", "slow", "fear", "frenzy", "weakness"];
        return negativeKeywords.some(keyword => effect.toLowerCase().includes(keyword));
    }

    document.addEventListener('DOMContentLoaded', () => {
        initializeIngredientsAndEffects();
        document.getElementById('showSharedEffects').addEventListener('click', showSharedEffects);
    });
</script>