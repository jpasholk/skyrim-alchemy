<div id="results" class="results"></div>

<script type="module">
    // GitHub raw URLs for JSON data
    const effectsURL = 'https://raw.githubusercontent.com/jpasholk/skyrim-alchemy/master/src/data/effects.json';
    const ingredientsURL = 'https://raw.githubusercontent.com/jpasholk/skyrim-alchemy/master/src/data/ingredients.json';

    // Function to load JSON data from a URL
    async function loadJSON(url) {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`Failed to fetch data from ${url}`);
        return await response.json();
    }

    // Function to initialize the effect selection dropdown and display all ingredients
    async function initializeDropdownAndDisplayAllIngredients() {
        console.log("Initializing dropdown and displaying all ingredients");

        try {
            const effectsData = await loadJSON(effectsURL);
            const ingredientsData = await loadJSON(ingredientsURL);

            // Populate the dropdown with effect options
            const effectSelect = document.getElementById('effectSelect');
            effectsData.forEach(effect => {
                const option = document.createElement('option');
                option.value = effect.effect;
                option.textContent = effect.effect;
                effectSelect.appendChild(option);
            });

            // Display all ingredients initially
            displayAllIngredients(ingredientsData);

            // Add event listener for dropdown change
            effectSelect.addEventListener('change', function () {
                if (this.value) {
                    displayIngredientsForEffect(this.value, ingredientsData);
                } else {
                    displayAllIngredients(ingredientsData); // Show all ingredients if no effect is selected
                }
            });
        } catch (error) {
            console.error("Error initializing dropdown and displaying ingredients:", error);
        }
    }

    // Function to update the label with the count of ingredients matching the selected effect
    function updateEffectLabelCount(effect, count) {
        const label = document.getElementById('effectSelectLabel');
        label.textContent = effect ? `There are ${count} ingredients that share ${effect}.` : "Select an effect:";
    }

    // Function to display all ingredients
    function displayAllIngredients(ingredientsData) {
        const resultsDiv = document.getElementById('results');
        resultsDiv.innerHTML = "<h2>Ingredients</h2>"; // Clear previous results
        updateEffectLabelCount("", ingredientsData.length);

        ingredientsData.forEach(ingredient => {
            const ingredientDiv = document.createElement('div');
            ingredientDiv.classList.add('ingredient');

            ingredientDiv.innerHTML = `
                <article>
                    <h3>${ingredient.name}</h3>
                    <hr>
                    <p><strong>Effects:</strong></p>
                    <ul>
                        ${ingredient.effects.map(effect => `<li>${effect}</li>`).join('')}
                    </ul>
                    <p><strong>Obtained from:</strong> ${ingredient.obtained}</p>
                    <p><strong>Value:</strong> ${ingredient.value}</p>
                    <p><strong>Weight:</strong> ${ingredient.weight}</p>
                    <p><strong>Plantable:</strong> ${ingredient.plantable ? 'Yes' : 'No'}</p>
                    <p><strong>Fishable:</strong> ${ingredient.fishable ? 'Yes' : 'No'}</p>
                </article>
            `;
            resultsDiv.appendChild(ingredientDiv);
        });
    }

    // Function to display ingredients with the selected effect
    function displayIngredientsForEffect(effect, ingredientsData) {
        const resultsDiv = document.getElementById('results');
        resultsDiv.innerHTML = ""; // Clear previous results

        if (effect) {
            // Standardize the selected effect for matching
            const standardizedEffect = effect.toLowerCase().replace(/[^a-zA-Z0-9]/g, "");

            // Filter ingredients based on a standardized effect match
            const matchingIngredients = ingredientsData.filter(ingredient =>
                ingredient.effects.some(eff => 
                    eff.toLowerCase().replace(/[^a-zA-Z0-9]/g, "") === standardizedEffect
                )
            );

            // Update label with the count of matching ingredients
            updateEffectLabelCount(effect, matchingIngredients.length);

            if (matchingIngredients.length > 0) {
                const header = document.createElement('h2');
                header.textContent = `"${effect}" Ingredients:`;
                header.classList.add('effect-name');
                resultsDiv.appendChild(header);

                matchingIngredients.forEach(ingredient => {
                    const ingredientDiv = document.createElement('div');
                    ingredientDiv.classList.add('ingredient');

                    ingredientDiv.innerHTML = `
                        <article>
                            <h3>${ingredient.name}</h3>
                            <hr>
                            <p><strong>Effects:</strong></p>
                            <ul>
                                ${ingredient.effects.map(eff => `<li>${eff}</li>`).join('')}
                            </ul>
                            <p><strong>Obtained from:</strong> ${ingredient.obtained}</p>
                            <p><strong>Value:</strong> ${ingredient.value}</p>
                            <p><strong>Weight:</strong> ${ingredient.weight}</p>
                            <p><strong>Plantable:</strong> ${ingredient.plantable ? 'Yes' : 'No'}</p>
                            <p><strong>Fishable:</strong> ${ingredient.fishable ? 'Yes' : 'No'}</p>
                        </article>
                    `;
                    resultsDiv.appendChild(ingredientDiv);
                });
            } else {
                resultsDiv.innerHTML = `<p>No ingredients found with the effect "${effect}".</p>`;
            }
        }
    }

    // Initialize dropdown and display all ingredients when the page loads
    document.addEventListener('DOMContentLoaded', initializeDropdownAndDisplayAllIngredients);
</script>