<div id="results" class="results"></div>

<script type="module">
    const effectsURL = 'https://raw.githubusercontent.com/jpasholk/skyrim-alchemy/master/src/data/effects.json';
    const ingredientsURL = 'https://raw.githubusercontent.com/jpasholk/skyrim-alchemy/master/src/data/ingredients.json';

    // Function to load JSON data from a URL
    async function loadJSON(url) {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`Failed to fetch data from ${url}`);
        return await response.json();
    }

    // Function to initialize the effect selection dropdown and display all ingredients
    async function initializeDropdownAndDisplayAllIngredients() {
        console.log("Initializing dropdown and displaying all ingredients");

        try {
            const effectsData = await loadJSON(effectsURL);
            const ingredientsData = await loadJSON(ingredientsURL);

            const effectSelect = document.getElementById('effectSelect');
            effectsData.forEach(effect => {
                const option = document.createElement('option');
                option.value = effect.effect;
                option.textContent = effect.effect;
                effectSelect.appendChild(option);
            });

            displayAllIngredients(ingredientsData);

            effectSelect.addEventListener('change', function () {
                if (this.value) {
                    displayIngredientsForEffect(this.value, ingredientsData);
                } else {
                    displayAllIngredients(ingredientsData);
                }
            });
        } catch (error) {
            console.error("Error initializing dropdown and displaying ingredients:", error);
        }
    }

    // Function to update the label with the count of ingredients matching the selected effect
    function updateEffectLabelCount(effect, count) {
        const label = document.getElementById('effectSelectLabel');
        label.textContent = effect ? `There are ${count} ingredients that share ${effect}.` : "Select an effect:";
    }

    // Function to display all ingredients
    function displayAllIngredients(ingredientsData) {
        const resultsDiv = document.getElementById('results');
        resultsDiv.innerHTML = "<h2>Ingredients</h2>";
        updateEffectLabelCount("", ingredientsData.length);

        ingredientsData.forEach(ingredient => {
            const ingredientDiv = document.createElement('div');
            ingredientDiv.classList.add('ingredient');

            ingredientDiv.innerHTML = `
                <article>
                    <h3>${ingredient.name}</h3>
                    <hr>
                    <p><strong>Effects:</strong></p>
                    <ul>
                        ${ingredient.effects.map(effect => colorEffect(effect)).join('')}
                    </ul>
                    <p><strong>Obtained from:</strong> ${ingredient.obtained}</p>
                    <p><strong>Value:</strong> ${ingredient.value}</p>
                    <p><strong>Weight:</strong> ${ingredient.weight}</p>
                    <p><strong>Plantable:</strong> ${ingredient.plantable ? 'Yes' : 'No'}</p>
                    <p><strong>Fishable:</strong> ${ingredient.fishable ? 'Yes' : 'No'}</p>
                </article>
            `;
            resultsDiv.appendChild(ingredientDiv);
        });
    }

    // Function to display ingredients with the selected effect
    function displayIngredientsForEffect(effect, ingredientsData) {
        const resultsDiv = document.getElementById('results');
        resultsDiv.innerHTML = "";

        if (effect) {
            const standardizedEffect = effect.toLowerCase().replace(/[^a-zA-Z0-9]/g, "");

            const matchingIngredients = ingredientsData.filter(ingredient =>
                ingredient.effects.some(eff => 
                    eff.toLowerCase().replace(/[^a-zA-Z0-9]/g, "") === standardizedEffect
                )
            );

            updateEffectLabelCount(effect, matchingIngredients.length);

            if (matchingIngredients.length > 0) {
                const header = document.createElement('h2');
                header.textContent = `${effect}`;
                header.classList.add('effect-name');
                resultsDiv.appendChild(header);

                const isPositiveEffect = !isNegativeEffect(effect);

                matchingIngredients.forEach(ingredient => {
                    const ingredientDiv = document.createElement('div');
                    ingredientDiv.classList.add('ingredient');

                    const effectWarningHTML = isPositiveEffect
                        ? getWarningHTML(ingredient, matchingIngredients, true)  // Display negative effects if positive effect selected
                        : getWarningHTML(ingredient, matchingIngredients, false); // Display positive effects if negative effect selected

                    ingredientDiv.innerHTML = `
                        <article>
                            <h3>${ingredient.name}</h3>
                            <hr>
                            ${effectWarningHTML}
                            <p><strong>Effects:</strong></p>
                            <ul>
                                ${ingredient.effects.map(eff => colorEffect(eff, eff.toLowerCase().replace(/[^a-zA-Z0-9]/g, "") === standardizedEffect)).join('')}
                            </ul>
                            <p><strong>Obtained from:</strong> ${ingredient.obtained}</p>
                            <p><strong>Value:</strong> ${ingredient.value}</p>
                            <p><strong>Weight:</strong> ${ingredient.weight}</p>
                            <p><strong>Plantable:</strong> ${ingredient.plantable ? 'Yes' : 'No'}</p>
                            <p><strong>Fishable:</strong> ${ingredient.fishable ? 'Yes' : 'No'}</p>
                        </article>
                    `;
                    resultsDiv.appendChild(ingredientDiv);
                });
            } else {
                resultsDiv.innerHTML = `<p>No ingredients found with the effect "${effect}".</p>`;
            }
        }
    }

    // Helper function to determine if an effect is negative
    function isNegativeEffect(effect) {
        const negativeKeywords = ["damage", "ravage", "paralysis", "slow", "fear", "frenzy", "weakness"];
        return negativeKeywords.some(keyword => effect.toLowerCase().includes(keyword));
    }

    // Helper function to color and style effects based on type and whether it matches the selected effect
    function colorEffect(effect, isSelected = false) {
        const isNegative = isNegativeEffect(effect);
        const color = isNegative ? "lightcoral" : "inherit";
        const style = `color: ${color}; font-weight: ${isSelected ? 'bold' : 'normal'}; text-decoration: ${isSelected ? 'underline' : 'none'};`;
        return `<li style="${style}">${effect}</li>`;
    }

    // Helper function to generate warning HTML for shared effects
    function getWarningHTML(ingredient, matchingIngredients, showNegative) {
        const effectsToShow = ingredient.effects.filter(effect => showNegative ? isNegativeEffect(effect) : !isNegativeEffect(effect));
        const warningColor = showNegative ? "lightcoral" : "lightgreen";
        const warningTitle = showNegative ? "Shared Negative Effects" : "Shared Positive Effects";

        const effectMatches = effectsToShow.flatMap(eff =>
            matchingIngredients
                .filter(otherIng => otherIng !== ingredient && otherIng.effects.includes(eff))
                .map(otherIng => `<li style="color: ${warningColor};">${eff} (also in ${otherIng.name})</li>`)
        );

        return effectMatches.length > 0
            ? `<p style="color: ${warningColor}; font-weight: bold;">${warningTitle}:</p><ul style="color: ${warningColor};">${effectMatches.join("")}</ul>`
            : "";
    }

    document.addEventListener('DOMContentLoaded', initializeDropdownAndDisplayAllIngredients);
</script>