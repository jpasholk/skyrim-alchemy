---
import { initializeDropdown } from '../components/effectIngredientFinder.js';
---

<section>
    <div id="results" class="results">
        <p class="notice">Results will show here.</p>
    </div>
</section>

<script>
    // GitHub raw URLs for JSON data
    const effectsURL = 'https://raw.githubusercontent.com/jpasholk/skyrim-alchemy/master/src/data/effects.json';
    const ingredientsURL = 'https://raw.githubusercontent.com/jpasholk/skyrim-alchemy/master/src/data/ingredients.json';

    // Function to load JSON data from a URL
    async function loadJSON(url) {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`Failed to fetch data from ${url}`);
        return await response.json();
    }

    // Function to initialize the effect selection dropdown
    async function initializeDropdown() {
        console.log("initializeDropdown function started");

        try {
            const effectsData = await loadJSON(effectsURL);
            const ingredientsData = await loadJSON(ingredientsURL);

            // Populate the dropdown with effect options
            const effectSelect = document.getElementById('effectSelect');
            if (!effectSelect) {
                console.error("Dropdown element with id 'effectSelect' not found.");
                return;
            }

            effectsData.forEach(effect => {
                const option = document.createElement('option');
                option.value = effect.effect;
                option.textContent = effect.effect;
                effectSelect.appendChild(option);
            });

            // Add event listener for dropdown change
            effectSelect.addEventListener('change', function () {
                displayIngredientsForEffect(this.value, ingredientsData);
            });
        } catch (error) {
            console.error("Error initializing dropdown:", error);
        }
    }

    // Function to display ingredients with the selected effect
    function displayIngredientsForEffect(effect, ingredientsData) {
        const resultsDiv = document.getElementById('results');
        resultsDiv.innerHTML = ""; // Clear previous results

        if (effect) {
            const matchingIngredients = ingredientsData.filter(ingredient =>
                ingredient.effects.includes(effect)
            );

            if (matchingIngredients.length > 0) {
                const header = document.createElement('h2');
                header.textContent = `"${effect}" Ingredients:`;
                header.classList.add('effect-name');
                resultsDiv.appendChild(header);

                matchingIngredients.forEach(ingredient => {
                    const ingredientDiv = document.createElement('div');
                    ingredientDiv.classList.add('ingredient');

                    ingredientDiv.innerHTML = `
                        <article>
                        <h3>${ingredient.name}</h3>
                        <hr>
                        <p><strong>Effects:</strong></p>
                        <ul>
                            ${ingredient.effects.map(effect => `<li>${effect}</li>`).join('')}
                        </ul>
                        <p><strong>Obtained from:</strong> ${ingredient.obtained}</p>
                        <p><strong>Value:</strong> ${ingredient.value}</p>
                        <p><strong>Weight:</strong> ${ingredient.weight}</p>
                        <p><strong>Plantable:</strong> ${ingredient.plantable ? 'Yes' : 'No'}</p>
                        <p><strong>Fishable:</strong> ${ingredient.fishable ? 'Yes' : 'No'}</p>
                        </article>
                    `;
                    resultsDiv.appendChild(ingredientDiv);
                });
            } else {
                resultsDiv.innerHTML = `<p>No ingredients found with the effect "${effect}".</p>`;
            }
        }
    }

    // Initialize dropdown when the page loads
    document.addEventListener('DOMContentLoaded', initializeDropdown);
</script>
</section>